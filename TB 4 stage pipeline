module test_mips32;
  
  reg clk1,clk2;
  integer k;
  
 mips32 processor(clk1,clk2);
  
  initial begin
    
    clk1 = 0;
    clk2 = 0;
  
  
  repeat(20) 
    begin
       #5 clk1 = 1; #5clk1 = 0;
       #5 clk2 = 1; #5clk2 = 0;
    end
  end
  
    
  initial 
    begin
      
      for(k = 0; k < 32 ; k++)
        processor.Reg[k] = k;
      
      
      processor.mem[0] = 32'h2801000a; // ADDI R1, R0, 10
      processor.mem[1] = 32'h28020014; // ADD R2, R0, 20
      processor.mem[2] = 32'h28030019;   // OR R3, R0, 25
      processor.mem[3] = 32'h0ce77800;   // OR R7,R7,R7
      processor.mem[4] = 32'h0ce77800; // OR R7,R7,R7
      processor.mem[5] = 32'h00222000;   // ADD R4, R1, R2
      processor.mem[6] = 32'h0ce77800; // OR R7,R7,R7
      processor.mem[7] = 32'h00832800; // ADD R5,R4,R3
      processor.mem[8] = 32'hfc000000; // HLT
      
      
      processor.HALTED = 0;
      processor.pc = 0;
      processor.BRANCH_TAKEN = 0;
      
      #280
      for(k = 0; k < 6 ; k++)
        $display("R%1d - %2d",k , processor.Reg[k]);
      
    end
  
  initial begin
    $dumpfile("mips32.vcd");
    $dumpvars(0,test_mips32);
    #300 $finish();
    
      
    end
  
endmodule
